<?php

// 1.	Бинарный поиск (Одна из моих любимых задачек)
// Имеется массив целых чисел. Априорно известно, что массив отсортирован в порядке возрастания значений его элементов.
// Необходимо написать функцию search(array $data, int $number) : int
// которая вернет индекс элемента массива с заданным значением или -1 в случае отсутствия данного значения в массиве.
// ВНИМАНИЕ: задача на построение алгоритма, использование array_search и иже с ним не принимается.
// Решение методом полного перебора так же не засчитывается.

function findPosition(array $data, int $number): int {
	$low = 0;
	$high = count($data) - 1;

	while ($low <= $high) {
		$mid = (int)floor(($low + $high) / 2);
		$guess = $data[$mid];

		if ($guess === $number) {
			return $mid;
		}

		if ($guess > $number) {
			$high = $mid - 1;
		} else {
			$low = $mid + 1;
		}
	}

	return -1;
};

echo findPosition([2, 45, 60, 100, 2000], 2000); // 4
echo findPosition([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 100); // -1
echo findPosition([100, 200, 300, 400, 500, 600, 700, 800, 900, 100], 100); // 0

// 2.	Поиск выходных
// Необходимо написать функцию weekend (string $begin, string $end) : int
// которая возвращает количество выходных дней (суббота и воскресенье) в заданном диапазоне дат.
// Следует учесть, что диапазон может быть сколь угодно большим (то есть решение перебором будет считаться некорректным).
// Даты задаются строками пригодными для распознавания функцией strtotime(). Пример weekend('06.06.2020', '06.06.2020') вернет 1.

function weekend(string $begin, string $end): int {
	$beginTimestamp = strtotime($begin);
	$endTimestamp = strtotime($end);

	$weekendDays = 0;

	for ($i = $beginTimestamp; $i <= $endTimestamp; $i += 86400) {
		if (date("N", $i) >= 6) { // Проверка, является ли текущий день выходным (суббота, воскресенье)
			$weekendDays++;
		}
	}

	return $weekendDays;
}

echo weekend("06.06.2020", "06.06.2020"); // 1
echo weekend("06.06.2020", "06.07.2020"); // 10
echo weekend("06.06.2020", "06.08.2020"); // 18

// 3. RGB
// Необходимо написать функцию rgb(int $r, int $g, int $b):int
// которая осуществляет упаковку цветовых составляющих переданных в диапазоне 0-255 в целое число.
// 1-байт(младший) - красный, 2-байт - зеленый, 3-й байт - синий. Пример rgb(255,0,255) вернет 16711935.

function rgb(int $r, int $g, int $b): int {
    return ($r << 16) + ($g << 8) + $b;
}

echo rgb(255, 0, 255); // 16711935 (Мой любимый цвет)
echo rgb(100, 255, 100); // 6618980
echo rgb(90, 90, 90); // 5921370

// 4.	Последовательность Фибоначчи
// Последовательность Фибоначчи. Необходимо написать функцию fiborow(int $limit) : string
// которая будет возвращать элементы последовательности Фибоначчи ограниченной переданным на вход значением $limit в виде строки (разделитель - пробел).
// Например: при входном значении 10 функция должна вернуть строку "0 1 1 2 3 5 8".

function fiborow(int $limit) : string {
    $fib = [0, 1];
    $i = 2;

    while ($fib[$i - 1] + $fib[$i - 2] <= $limit) {
        $fib[] = $fib[$i - 1] + $fib[$i - 2];
        $i++;
    }

    return implode(" ", $fib);
}

echo fiborow(10); // "0 1 1 2 3 5 8"
echo fiborow(15); // "0 1 1 2 3 5 8 13"
echo fiborow(100); // "0 1 1 2 3 5 8 13 21 34 55 89"

// Благодарю за прочтение моего кода, техническое тестирование выполнено !